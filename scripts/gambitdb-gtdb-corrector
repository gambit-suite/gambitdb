#!/usr/bin/env python3
import sys
import argparse
import logging
import os
sys.path.append('../')
sys.path.append('./')
from gambitdb.GtdbSpeciesCorrecter import GtdbSpeciesCorrector

parser = argparse.ArgumentParser(
    description = 'Correct species classifications from GTDB to match NCBI taxonomy for specified genera',
    usage = 'gtdb-species-corrector [options]',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

# Required input files
parser.add_argument('gtdb_metadata_spreadsheet', help='Path to the original GTDB metadata spreadsheet (TSV)', type=str)
parser.add_argument('assembly_metadata_file', help='Path to the assembly_metadata.csv file generated by gambitdb-gtdb', type=str)
parser.add_argument('species_taxa_file', help='Path to the species_taxa.csv file generated by gambitdb-gtdb', type=str)
parser.add_argument('genus_file', help='Path to a text file containing genus names to correct, one per line', type=str)
# Optional output files
parser.add_argument('--output_assembly_metadata', '-a', help='Path to write corrected assembly metadata', type=str)
parser.add_argument('--output_species_taxa', '-t', help='Path to write corrected species taxa', type=str)
# Optional parameters
parser.add_argument('--no_collapse_genera', '-n', action='store_true', help='Disable collapsing of novel genera with _X suffix', default=False)
parser.add_argument('--debug', action='store_true', help='Enable debug logging', default=False)
parser.add_argument('--verbose', '-v', action='store_true', help='Enable verbose output', default=False)
parser.add_argument('--log_file', '-l', help='Path to log file', type=str)

options = parser.parse_args()

log_level = logging.DEBUG if options.debug else (logging.INFO if options.verbose else logging.WARNING)
logging.basicConfig(level=log_level)
logger = logging.getLogger()


if options.log_file:
    file_handler = logging.FileHandler(options.log_file)
    file_handler.setLevel(log_level)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    logger.info(f"Logging to file: {options.log_file}")

# Check if input files exist
if not os.path.exists(options.gtdb_metadata_spreadsheet):
    logger.error(f"GTDB metadata spreadsheet not found: {options.gtdb_metadata_spreadsheet}")
    sys.exit(1)
if not os.path.exists(options.assembly_metadata_file):
    logger.error(f"Assembly metadata file not found: {options.assembly_metadata_file}")
    sys.exit(1)
if not os.path.exists(options.species_taxa_file):
    logger.error(f"Species taxa file not found: {options.species_taxa_file}")
    sys.exit(1)
if not os.path.exists(options.genus_file):
    logger.error(f"Genus file not found: {options.genus_file}")
    sys.exit(1)

# Log the options
logger.debug("Options:")
logger.debug(f"  GTDB metadata: {options.gtdb_metadata_spreadsheet}")
logger.debug(f"  Assembly metadata: {options.assembly_metadata_file}")
logger.debug(f"  Species taxa: {options.species_taxa_file}")
logger.debug(f"  Genus file: {options.genus_file}")
logger.debug(f"  Output assembly metadata: {options.output_assembly_metadata}")
logger.debug(f"  Output species taxa: {options.output_species_taxa}")
logger.debug(f"  Collapse genera: {not options.no_collapse_genera}")
logger.debug(f"  Debug: {options.debug}")
logger.debug(f"  Verbose: {options.verbose}")

try:
    logger.info("Initializing GtdbSpeciesCorrector")
    corrector = GtdbSpeciesCorrector(
        options.gtdb_metadata_spreadsheet,
        options.assembly_metadata_file,
        options.species_taxa_file,
        options.genus_file,
        options.output_assembly_metadata,
        options.output_species_taxa,
        not options.no_collapse_genera,
        options.debug,
        options.verbose
    )
    
    logger.info("Running species correction")
    corrector.gtdb_species_correction()
    logger.info("Species correction completed successfully")
    
except Exception as e:
    logger.error(f"Error during species correction: {str(e)}", exc_info=True)
    sys.exit(1)