#!/usr/bin/env python3
import sys
import argparse
import logging
sys.path.append('../')
sys.path.append('./')
from gambitdb.CompressClusters import CompressClusters

parser = argparse.ArgumentParser(
    description = 'Given a pairwise file, compress highly similar samples and keep one representative',
    usage = 'gambitdb-compress-clusters [options]',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

# Required input files
parser.add_argument('pairwise_distances_filename',  help='A pairwise distance file', type=str)

# Output files
parser.add_argument('--output_pairwise_filename', '-p', help='Output filename for compressed pairwise distance table', default = 'pw-dists-compressed.csv', type=str)

# Optional input parameters for gambit
parser.add_argument('--max_distance',	 '-m', help='maximum pairwise distance for a cluster', type=float, default = 0.1)
parser.add_argument('--debug', action='store_true', help='Turn on debugging', default = False)
parser.add_argument('--verbose', '-v', action='store_true', help='Turn on verbose output', default = False)

options = parser.parse_args()
logging.basicConfig(filename='output_logfile.txt', level=logging.DEBUG)

# extra debugging with a proper stack trace and profiling
if options.debug:
    import cProfile, pstats, io
    pr = cProfile.Profile()
    pr.enable()
    options.verbose = True
    
    CompressClusters(options.pairwise_distances_filename, 
                     options.output_pairwise_filename,
                     options.max_distance,
                  options.verbose).compress()
    
    pr.disable()
    s = io.StringIO()
    sortby = 'cumulative'
    ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
    ps.print_stats()
    print(s.getvalue())
else:
    CompressClusters(options.pairwise_distances_filename, 
                     options.output_pairwise_filename,
                     options.max_distance,
                  options.verbose).compress()
