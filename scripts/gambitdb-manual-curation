#!/usr/bin/env python3
# Take in a gtdb spreadsheet and an existing database and signatures file.
# Filter the spreadsheet to only include Shigella, taking the ncbi_taxonomy column and filtering on 'g__Shigella;s__Shigella '
# Copy this data into the gtdb taxonomy column of the spreadsheet
# get a list of all accessions
# Remove these accessions from the DB and sigs file.
# Using the iterative add method, add the new species to the database, but without any collapse of clusters.
# Create a pairwise distance matrix for the new species and Ecoli. Are there e.coli genomes that are intermingled with Shigella?  
# upate genus name to have Escherichia/Shigella
# Set the genus/species diameters for Shigella.
# repair the database and sigs file.
# output a new database and signatures file



import argparse
import numpy as np
import sqlite3
import shutil
import os
import sys
import uuid
from gambit.sigs import  load_signatures, dump_signatures, AnnotatedSignatures
sys.path.append('../')
sys.path.append('./')
from gambitdb.GtdbSpreadsheetParser import GtdbSpreadsheetParser

parser = argparse.ArgumentParser(
    description = 'Add Shigella to a gambit database',
    usage = 'gambitdb-manual-curation [options]',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

# Required input files
parser.add_argument('database_filename', help='gambit database file', type=str)
parser.add_argument('signatures_filename', help='gambit signatures file', type=str)
parser.add_argument('gtdb_filename', help='GTDB spreadsheet (TSV)', type=str)

# optional input parameters
parser.add_argument('--cpus',	 '-p', help='Number of cpus to use', type=int, default = 1)

# Output
parser.add_argument('--output_database_filename', '-a', help='Output filename for database with genus diameters applied', default = 'database_with_shigella.gdb', type=str)
parser.add_argument('--output_signatures_filename', '-b', help='Summary of genus diameters', default = 'signatures_with_shigella.gs', type=str)

parser.add_argument('--debug', action='store_true', help='Turn on debugging', default = False)
parser.add_argument('--verbose', '-v', action='store_true', help='Turn on verbose output', default = False)
options = parser.parse_args()

os.system(' '.join(['gambitdb-repair-db',  '--database_output_filename', options.output_database_filename, options.database_filename]))
os.system(' '.join(['gambitdb-sync-signatures-db', '--signatures_output_filename', options.output_signatures_filename, options.output_database_filename, options.signatures_filename])) 

def replace_species(gtdb_filename, species_filter, signatures_filename, output_signatures_filename, database_filename, output_database_filename, cpus, debug, verbose, checkm_completeness):
    try:
        spreadsheet_parser = GtdbSpreadsheetParser(gtdb_filename, 90, 10, 1000, False, False, 1, '', 'species_taxa.csv',  'assembly_metadata.csv',  'accessions_to_download.csv', 'representative_genomes.csv', debug, verbose )
        spreadsheet_df = spreadsheet_parser.read_in_gtdb_spreadsheet()
       # filter the spreadsheet to only include the species we are interested in
        spreadsheet_df = spreadsheet_df[spreadsheet_df['ncbi_taxonomy'].str.contains(species_filter)]
        # overwrite the gtdb taxonomy with the data from the ncbi_taxonomy column instead of the GTDB column.
        spreadsheet_df['gtdb_taxonomy'] = spreadsheet_df['ncbi_taxonomy']
        shigella_accessions = spreadsheet_df['accession'].to_list()
        # save the filtered GTDB spreadsheet to a file
        temp_gtdb_filename = gtdb_filename + '.temp'
        spreadsheet_df.to_csv(temp_gtdb_filename, sep='\t', index=False)
        print("Species to replace accessions found: "+ str(len(shigella_accessions)))

        # Remove species accessions from the signatures file

        with load_signatures(signatures_filename) as src:
            in_gidxs = np.flatnonzero(~np.in1d(src.ids,shigella_accessions))
            filtered_src_ids = src.ids[in_gidxs]
            filtered_src = src[in_gidxs]
            out_sigs = AnnotatedSignatures(filtered_src, filtered_src_ids, src.meta)
            dump_signatures(output_signatures_filename, out_sigs)

        # remove genomes from the database (if they exist) because they are linked to E.coli
        shutil.copy(database_filename, output_database_filename)
        main_db_connection = sqlite3.connect(output_database_filename)
        shigella_genomes = main_db_connection.execute("SELECT genome_annotations.genome_id, genomes.id FROM genome_annotations INNER JOIN genomes ON genome_annotations.genome_id = genomes.id WHERE genomes.refseq_acc IN (" + str(','.join(['?' for _ in shigella_accessions]))+ ")", shigella_accessions)
        shigella_genomes_counter = 0
        for genome_annotations_genome_id, genomes_id in shigella_genomes:
            main_db_connection.execute("DELETE FROM genome_annotations WHERE genome_id = ?", (genome_annotations_genome_id,))
            main_db_connection.execute("DELETE FROM genomes WHERE id = ?", (genomes_id,))
            shigella_genomes_counter += 1
        print("Removed " + str(shigella_genomes_counter) + " Species genomes from the database in preparation for adding them back in properly." )
        main_db_connection.commit()
        main_db_connection.close()

        # Add the species to the database
        temp_database_filename = 'input_db.gdb'
        temp_signatures_filename = 'input_db.gs'
        os.system(' '.join(['gambitdb-iterative-build', '-p', str(cpus), '--checkm_completeness', str(checkm_completeness),  '--interspecies_overlap' , '0.00001', '--do_not_filter_existing_species', output_signatures_filename, output_database_filename,  temp_gtdb_filename]))
        os.remove(temp_gtdb_filename)
        shutil.copy(temp_signatures_filename, output_signatures_filename)

        # Fix any inconsistencies that were added in the build process
        os.system(' '.join(['gambitdb-repair-db',  '--database_output_filename', output_database_filename, temp_database_filename]))
        os.remove(temp_database_filename)
        os.remove(temp_signatures_filename)
    except Exception as e:
        print("Error in replace_species: " + str(e))
        return

# These are species where there are difficulties calling them and the accepted taxonomy in the community is not the same as the taxonomy in GTDB
# Use the NCBI taxonomy and all reasonable genomes.
shutil.copy(options.output_signatures_filename, 'tmp.gs')
shutil.copy(options.output_database_filename, 'tmp.gdb')
replace_species(options.gtdb_filename, 'g__Mycolicibacterium;s__', 'tmp.gs', options.output_signatures_filename, 'tmp.gdb', options.output_database_filename, options.cpus, options.debug, options.verbose, 97)
shutil.copy(options.output_signatures_filename, 'tmp.gs')
shutil.copy(options.output_database_filename, 'tmp.gdb')
replace_species(options.gtdb_filename, 'g__Mycolicibacter;s__',    'tmp.gs', options.output_signatures_filename, 'tmp.gdb', options.output_database_filename, options.cpus, options.debug, options.verbose, 97)
shutil.copy(options.output_signatures_filename, 'tmp.gs')
shutil.copy(options.output_database_filename, 'tmp.gdb')
replace_species(options.gtdb_filename, 'g__Mycobacteroides;s__',   'tmp.gs', options.output_signatures_filename, 'tmp.gdb', options.output_database_filename, options.cpus, options.debug, options.verbose, 97)
shutil.copy(options.output_signatures_filename, 'tmp.gs')
shutil.copy(options.output_database_filename, 'tmp.gdb')
replace_species(options.gtdb_filename, 'g__Mycobacterium;s__',     'tmp.gs', options.output_signatures_filename, 'tmp.gdb', options.output_database_filename, options.cpus, options.debug, options.verbose, 97)
shutil.copy(options.output_signatures_filename, 'tmp.gs')
shutil.copy(options.output_database_filename, 'tmp.gdb')
replace_species(options.gtdb_filename, 'g__Shigella;s__',          'tmp.gs', options.output_signatures_filename, 'tmp.gdb', options.output_database_filename, options.cpus, options.debug, options.verbose, 97)
shutil.copy(options.output_signatures_filename, 'tmp.gs')
shutil.copy(options.output_database_filename, 'tmp.gdb')
# This species has a poor checkm (version 1) completeness
replace_species(options.gtdb_filename, 'g__Tropheryma;s__Tropheryma whipplei',     'tmp.gs', options.output_signatures_filename, 'tmp.gdb', options.output_database_filename, options.cpus, options.debug, options.verbose, 70)

# This genus only has 2 genomes.
#shutil.copy(options.output_signatures_filename, 'tmp.gs')
#shutil.copy(options.output_database_filename, 'tmp.gdb')
#replace_species(options.gtdb_filename, 'g__Mycolicibacillus;s__',  'tmp.gs', options.output_signatures_filename, 'tmp.gdb', options.output_database_filename, options.cpus, options.debug, options.verbose, 97)



# Add custom structure for Eschrechia/Shigella
database_connection = sqlite3.connect(options.output_database_filename)
# rename the genus Eschrechia to Eschrechia/Shigella - set diameter to 0.80
database_connection.execute("UPDATE taxa SET distance_threshold = 0.8, name = 'Escherichia/Shigella' WHERE rank = 'genus' AND name = 'Escherichia'")
# add a taxa for Eschrechia coli/Shigella, no rank, set diameter to 0.68 - point to the Eschrechia/Shigella genus as parent
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold, parent_id, report, genome_set_id) VALUES (?, 'Escherichia coli/Shigella', NULL, '', 0.68, (SELECT id FROM taxa WHERE name = 'Escherichia/Shigella'), 1, (SELECT id FROM genome_sets LIMIT 1))", (uuid_key,))
# point Eschrechia coli species to Eschrechia coli/Shigella taxa, distance_threshold 0.0 (should be already)
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Escherichia coli/Shigella'), distance_threshold = 0 WHERE name = 'Escherichia coli'")
# From the Shigella genus, remove the rank, set diameter to 0.68, point to the Eschrechia coli/Shigella as parent
database_connection.execute("UPDATE taxa SET rank = NULL, distance_threshold = 0, parent_id = (SELECT id FROM taxa WHERE name = 'Escherichia coli/Shigella') WHERE name = 'Shigella'")

# add custom structure for Lacticaseibacillus casei/paracasei.  Just one odd species
# add a taxa for Lacticaseibacillus casei/paracasei with null rank and diameter 0.4745 with Lacticaseibacillus as the parent_id
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold, parent_id, report, genome_set_id) VALUES (?, 'Lacticaseibacillus casei/paracasei', NULL, '', 0.68, (SELECT id FROM taxa WHERE name = 'Lacticaseibacillus'), 1, (SELECT id FROM genome_sets LIMIT 1))", (uuid_key,))
# change the parent_id of Lacticaseibacillus paracasei to Lacticaseibacillus casei/paracasei and set distance_threshold to be zero
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Lacticaseibacillus casei/paracasei'), distance_threshold = 0, report = 0 WHERE name = 'Lacticaseibacillus paracasei'")

# Vibrio diabolicus or antiquarius or chemaguriensis
#2127|gambit/refseq-curated/Vibrio diabolicus or antiquarius or chemaguriensis|Vibrio diabolicus or antiquarius or chemaguriensis|species group||0.0|1|1|1918||
#2130|ncbi/taxonomy/50719|Vibrio diabolicus|species||0.5887|0|1|2127|50719|
#2131|ncbi/taxonomy/150340|Vibrio antiquarius|species||0.0439|0|1|2127|150340|
#2132|ncbi/taxonomy/2527672|Vibrio chemaguriensis|species||0.1687|0|1|2127|2527672|
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Vibrio diabolicus or antiquarius or chemaguriensis', 'species group', '', 0.0, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Vibrio'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET report = 0, parent_id = (SELECT id FROM taxa WHERE name = 'Vibrio diabolicus or antiquarius or chemaguriensis') WHERE name = 'Vibrio diabolicus'")
database_connection.execute("UPDATE taxa SET report = 0, parent_id = (SELECT id FROM taxa WHERE name = 'Vibrio diabolicus or antiquarius or chemaguriensis') WHERE name = 'Vibrio antiquarius'")
database_connection.execute("UPDATE taxa SET report = 0, parent_id = (SELECT id FROM taxa WHERE name = 'Vibrio diabolicus or antiquarius or chemaguriensis') WHERE name = 'Vibrio chemaguriensis'")

#2128|gambit/refseq-curated/Vibrio ordalii or anguillarum|Vibrio ordalii or anguillarum|species group||0.0|1|1|1918||
#2133|ncbi/taxonomy/28174|Vibrio ordalii|species||0.5013|0|1|2128|28174|
#2134|ncbi/taxonomy/55601|Vibrio anguillarum|species||0.5958|0|1|2128|55601|
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Vibrio ordalii or anguillarum', 'species group', '', 0.0, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Vibrio'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET report = 0, parent_id = (SELECT id FROM taxa WHERE name = 'Vibrio ordalii or anguillarum') WHERE name = 'Vibrio ordalii'")
database_connection.execute("UPDATE taxa SET report = 0, parent_id = (SELECT id FROM taxa WHERE name = 'Vibrio ordalii or anguillarum') WHERE name = 'Vibrio anguillarum'")

#Original 1.3.0 database
#2129|gambit/refseq-curated/Enterobacter cloacae complex|Enterobacter cloacae complex|species group||0.0|1|1|1920||
#2102|gambit/refseq-curated/Enterobacter cloacae subspecies 1|Enterobacter cloacae subspecies 1|subspecies||0.3849|0|1|2129||
#2103|gambit/refseq-curated/Enterobacter cloacae subspecies 2|Enterobacter cloacae subspecies 2|subspecies||0.3645|0|1|2129||
#2135|ncbi/taxonomy/550|Enterobacter cloacae|species||0.0|1|1|2129|550|
#2136|ncbi/taxonomy/61645|Enterobacter asburiae|species||0.0|1|1|2129|61645|
#2137|ncbi/taxonomy/158836|Enterobacter hormaechei|species||0.0|1|1|2129|158836|
# GTDB
#325|e8dc7227-d71d-4521-8197-e2276cc4f27b|Enterobacter cloacae|species||0.0|1|1|49|1|
#326|f530b860-5600-41ea-9c6c-dd9aadb6cb14|Enterobacter cloacae subspecies 1|||0.3849|0|1|325|1|
#327|10c7b978-4ac9-40ab-a350-3c0a55603c45|Enterobacter cloacae subspecies 2|||0.4797|0|1|325|1|
#473|bc73dc4c-05a3-4408-beb7-2f51cf9d1461|Enterobacter cloacae_M|species||0.5999|1|1|49|1|
#1565|286a6572-f5cc-41fd-a433-5645b5f6fd85|Enterobacter cloacae_I|species||0.0|1|1|49|1|
#1566|a2fc351d-3c26-4d93-8e2f-726f1f23469d|Enterobacter cloacae_I subspecies 1|||0.3466|0|1|1565|1|
#1567|7e189596-0fe5-4e2c-a887-581b91ee591f|Enterobacter cloacae_I subspecies 2|||0.4612|0|1|1565|1|
#3770|c834f167-901e-4a16-a4e1-4cf59d711b57|Enterobacter cloacae_O|species||0.336|1|1|49|1|
#4703|808ad0c3-cf72-4d4f-be25-8a2a565ae6a9|Enterobacter cloacae_L|species||0.5361|1|1|49|1|
#8915|6145724e-3455-4c70-b9bf-a0c22a33b41c|Enterobacter cloacae_N|species||0.3226|1|1|49|1|
#9005|453f1d31-7948-409d-a673-f1b19c50604a|Enterobacter cloacae_P|species||0.3383|1|1|49|1|

uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Enterobacter cloacae complex', 'species group', '', 0.0, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Enterobacter'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Enterobacter cloacae complex') WHERE name = 'Enterobacter cloacae'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Enterobacter cloacae complex') WHERE name = 'Enterobacter asburiae'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Enterobacter cloacae complex') WHERE name = 'Enterobacter hormaechei'")
database_connection.execute("UPDATE taxa SET report = 0, parent_id = (SELECT id FROM taxa WHERE name = 'Enterobacter cloacae complex') WHERE name LIKE ? AND name NOT LIKE ?", ('Enterobacter cloacae_%', '%subspecies%',))

#10240|gambit/refseq-curated/Citrobacter cronae or Citrobacter werkmanii|Citrobacter cronae or Citrobacter werkmanii|species group||0.0|1|1|9875||
#10242|ncbi/taxonomy/1748967|Citrobacter cronae|species||0.4312|0|1|10240|1748967|
#10243|ncbi/taxonomy/67827|Citrobacter werkmanii|species||0.6952|0|1|10240|67827|
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Citrobacter cronae or Citrobacter werkmanii', 'species group', '', 0.0, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Citrobacter'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Citrobacter cronae or Citrobacter werkmanii'), report = 0 WHERE name = 'Citrobacter cronae'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Citrobacter cronae or Citrobacter werkmanii'), report = 0 WHERE name = 'Citrobacter werkmanii'")

#10241|gambit/refseq-curated/Providencia stuartii or Providencia thailandensis|Providencia stuartii or Providencia thailandensis|species group||0.0|1|1|9876||
#10244|ncbi/taxonomy/588|Providencia stuartii|species||0.4748|0|1|10241|588|
#10245|ncbi/taxonomy/990144|Providencia thailandensis|species||0.308|0|1|10241|990144|
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Providencia stuartii or Providencia thailandensis', 'species group', '', 0.0, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Providencia'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Providencia stuartii or Providencia thailandensis'), report = 0 WHERE name = 'Providencia stuartii'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Providencia stuartii or Providencia thailandensis'), report = 0 WHERE name = 'Providencia thailandensis'")


# may have to update this curation after taxonomic reorganisation

#10250|ncbi/taxonomy/2249310|Mycobacterium simiae complex|species_group||0.78489|1|1||2249310|
#10374|ncbi/taxonomy/1784|Mycobacterium simiae|species||0.5608|1|1|10250|1784|
#10376|ncbi/taxonomy/722731|Mycobacterium shigaense|species||0.0507|1|1|10250|722731|
#10377|ncbi/taxonomy/220927|Mycobacterium saskatchewanense|species||0.0017|1|1|10250|220927|
#10378|ncbi/taxonomy/292462|Mycobacterium florentinum|species||0.001|1|1|10250|292462|
#10379|ncbi/taxonomy/470076|Mycobacterium stomatepiae|species||0.0153|1|1|10250|470076|
#10381|ncbi/taxonomy/185642|Mycobacterium parmense|species||0.0021|1|1|10250|185642|
#10382|ncbi/taxonomy/53376|Mycobacterium heidelbergense|species||0.0026|1|1|10250|53376|
#10389|ncbi/taxonomy/120959|Mycobacterium kubicae|species||0.4331|1|1|10250|120959|
#10390|ncbi/taxonomy/47839|Mycobacterium triplex|species||0.0007|1|1|10250|47839|
#10391|ncbi/taxonomy/767916|Mycobacterium paraense|species||0.2984|1|1|10250|767916|
#10392|ncbi/taxonomy/243061|Mycobacterium sherrisii|species||0.1049|1|1|10250|243061|
#10393|ncbi/taxonomy/153971|Mycobacterium palustre|species||0.0956|1|1|10250|153971|
#10394|ncbi/taxonomy/33895|Mycobacterium interjectum|species||0.0313|1|1|10250|33895|
#10395|ncbi/taxonomy/154654|Mycobacterium montefiorense|species||0.471|1|1|10250|154654|
#10396|ncbi/taxonomy/141349|Mycobacterium lentiflavum|species||0.3222|1|1|10250|141349|
#10397|ncbi/taxonomy/761804|Mycobacterium europaeum|species||0.2488|1|1|10250|761804|
#10398|ncbi/taxonomy/28445|Mycobacterium intermedium|species||0.0051|1|1|10250|28445|
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Mycobacterium simiae complex', 'species group', '', 0.78489, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Mycobacterium'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium simiae'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium shigaense'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium saskatchewanense'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium florentinum'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium stomatepiae'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium parmense'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium heidelbergense'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium kubicae'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium triplex'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium paraense'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium sherrisii'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium palustre'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium interjectum'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium montefiorense'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium lentiflavum'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium europaeum'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium simiae complex') WHERE name = 'Mycobacterium intermedium'")

#10251|ncbi/taxonomy/2993898|Mycobacterium ulcerans group|species_group||0.4474|1|1||2993898|
#10375|ncbi/taxonomy/265949|Mycobacterium pseudoshottsii|species||0.0626|1|1|10251|265949|
#10384|ncbi/taxonomy/1781|Mycobacterium marinum|species||0.1938|1|1|10251|1781|
#10385|ncbi/taxonomy/1809|Mycobacterium ulcerans|species||0.0593|1|1|10251|1809|
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Mycobacterium ulcerans group', 'species group', '', 0.4474, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Mycobacterium'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium ulcerans group') WHERE name = 'Mycobacterium pseudoshottsii'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium ulcerans group') WHERE name = 'Mycobacterium marinum'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium ulcerans group') WHERE name = 'Mycobacterium ulcerans'")

#10252|ncbi/taxonomy/120793|Mycobacterium avium complex (MAC)|species_group||0.78489|1|1||120793|
#10380|ncbi/taxonomy/560555|Mycobacterium mantenii|species||0.6879|1|1|10252|560555|
#10383|ncbi/taxonomy/1764|Mycobacterium avium|species||0.4994|1|1|10252|1764|
#10387|ncbi/taxonomy/1138383|Mycobacterium paraintracellulare|species||0.3195|1|1|10252|1138383|
#10388|ncbi/taxonomy/701042|Mycobacterium marseillense|species||0.3008|1|1|10252|701042|
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Mycobacterium avium complex (MAC)', 'species group', '', 0.78489, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Mycobacterium'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium avium complex (MAC)') WHERE name = 'Mycobacterium mantenii'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium avium complex (MAC)') WHERE name = 'Mycobacterium avium'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium avium complex (MAC)') WHERE name = 'Mycobacterium paraintracellulare'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium avium complex (MAC)') WHERE name = 'Mycobacterium marseillense'")

#10253|ncbi/taxonomy/77643|Mycobacterium tuberculosis complex|species_group||0.1951|1|1||77643|
#10386|ncbi/taxonomy/78331|Mycobacterium canettii|species||0.1163|1|1|10253|78331|
#10399|ncbi/taxonomy/1773|Mycobacterium tuberculosis|species||0.0914|1|1|10253|1773|
uuid_key = str(uuid.uuid4())
database_connection.execute("INSERT INTO taxa (key, name, rank, description, distance_threshold,  report, genome_set_id, parent_id) VALUES (?, 'Mycobacterium tuberculosis complex', 'species group', '', 0.1951, 1, (SELECT id FROM genome_sets LIMIT 1), (SELECT id FROM taxa WHERE name = 'Mycobacterium'))", (uuid_key,))
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium tuberculosis complex') WHERE name = 'Mycobacterium canettii'")
database_connection.execute("UPDATE taxa SET parent_id = (SELECT id FROM taxa WHERE name = 'Mycobacterium tuberculosis complex') WHERE name = 'Mycobacterium tuberculosis'")

database_connection.commit()
database_connection.close()

# Collapse novel genus with _X suffix
# remove Underscore from novel genus names. In the taxa table identify genus with _X and the master genus name (without a suffix).
# Have a hash table of taxonid (with suffix) to taxonid (without suffix). Lookup all species which have this taxonid as a parent_id,
# and update the parent_id (without suffix), and rewrite the species name to remove the suffix.
# Have a minimum genus name size.
# output all the rewritten genus/species names.
# output the database

database_connection = sqlite3.connect(options.output_database_filename)
# get top level genus
top_level_genus = database_connection.execute("select name, id from taxa where name not like '%\\_%' ESCAPE '\\' and rank = 'genus';")
for top_level_genus_name, top_level_genus_id in top_level_genus:
    sub_genus = database_connection.execute("select name, id from taxa where name like ?  ESCAPE '\\' and rank = 'genus';", (str(top_level_genus_name)+"\\_%",))
    for sub_genus_name, sub_genus_id in sub_genus:
        print("Collapsing " + sub_genus_name + " into " + top_level_genus_name)
        # update the parent_id of the species to the top level genus
        species = database_connection.execute("select name, id from taxa where parent_id = ?;", (sub_genus_id,))
        for species_name, species_id in species:
            database_connection.execute("update taxa set parent_id = ? where id = ?;", (top_level_genus_id, species_id))
            updated_species_name = species_name.replace(sub_genus_name + " ", top_level_genus_name + " ")
            database_connection.execute("update taxa set name = ? where id = ?;", (updated_species_name, species_id))
            print("Updated " + species_name + " to " + updated_species_name)
        database_connection.execute("delete from taxa where id = ?;", (sub_genus_id,))
database_connection.commit()
database_connection.close()

# Make sure the signatures file only contains signatures that correspond to genomes in the database
temp_signatures_filename = 'temp_signatures.gs'
shutil.copy(options.output_signatures_filename, 'temp_signatures.gs')
os.system(' '.join(['gambitdb-sync-signatures-db', '--signatures_output_filename', options.output_signatures_filename, options.output_database_filename, temp_signatures_filename]))
os.remove(temp_signatures_filename)
