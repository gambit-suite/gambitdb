#!/usr/bin/env python3
import sys
import argparse
import logging
sys.path.append('../')
sys.path.append('./')
from gambitdb.Fungi import FungiParser

parser = argparse.ArgumentParser(
    description = 'Given a NCBI metadata spreadsheet, output a list of accessions to download, a species taxonid file and a genome metadata file',
    usage = 'gambitdb-fungi [options]',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

# Required input files
parser.add_argument('ncbi_metadata_spreadsheet',  help='NCBI metadata file', type=str)

# Optional input parameters
parser.add_argument('--max_contigs', '-d',  help='Maximum number of contigs. Please note some species systematically assemble poorly with short read data.', type=int, default=100)
parser.add_argument('--minimum_genomes_per_species', '-i',  help='Minimum number of genomes in a species, otherwise exclude the species', type=float, default=2)

# Output files
parser.add_argument('--species_taxon_output_filename', '-s', help='Output filename for with the taxonomy', default = 'species_taxa.csv', type=str)
parser.add_argument('--genome_assembly_metadata_output_filename', '-g', help='Genome metadata', default = 'assembly_metadata.csv', type=str)
parser.add_argument('--accessions_output_filename', '-a', help='Genome accessions for download', default = 'accessions_to_download.csv', type=str)
parser.add_argument('--representative_genomes', '-r', help='Representative genome accessions', default = 'representative_genomes.csv', type=str)

options = parser.parse_args()

FungiParser(options.ncbi_metadata_spreadsheet, 
    options.max_contigs,
    options.minimum_genomes_per_species,
    options.species_taxon_output_filename, 
    options.genome_assembly_metadata_output_filename, 
    options.accessions_output_filename, 
    options.representative_genomes).generate_spreadsheets()